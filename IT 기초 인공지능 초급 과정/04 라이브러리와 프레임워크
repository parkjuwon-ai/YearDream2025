# 📌 01 웹(Web)의 역사와 발전

## 🌐 정적 웹과 동적 웹

- 초창기 웹은 HTML 문서(**정적 파일**)를 웹 브라우저로 전달하는 형태로 시작함.
  - **정적 파일**: HTML/CSS 같은 변화하지 않는 파일
- 사용자 요청에 따라 매번 다르게 화면이 바뀌는 **동적 웹**이 등장함.
  - **동적 파일**: 서버에서 코드가 실행되어 결과가 달라짐 (예: 검색결과, 게시판 등)

## 🚩 웹 개발의 변화

- 웹 프로젝트의 규모가 점점 크고 복잡해짐
- 반복되는 코드가 늘어남
- 협업의 필요성 증가 → **구조화된 개발 방식**의 중요성 증가

---

# 📚 02 라이브러리(Library)

## 🚀 라이브러리란?

- 자주 사용하거나 반복적으로 필요한 기능을 모아둔 코드의 집합
- 쉽게 말해, **"코드로 만든 유용한 도구 모음집"**
- 프로그래밍 언어마다 다양한 라이브러리가 존재하며, 이를 적절히 사용하는 능력이 중요

## 🛠 라이브러리 특징

- 특정 기능들을 함수(Function) 형태로 제공
- 오픈 소스로 공개된 라이브러리는 **package(패키지)**라고 부름

## 🔑 라이브러리를 사용하는 이유

- 코드의 재사용성 증가 → 작업 효율 향상
- 검증된 라이브러리를 통해 안정성과 신뢰성 보장
- 너무 무거운 라이브러리를 사용하면 성능 저하 발생 가능 → 적절한 선택 중요

## 🎯 예시: passport.js (로그인 라이브러리)

- 로그인/회원가입을 쉽게 구현할 수 있는 JavaScript 라이브러리
- 페이스북, 카카오 등 소셜 로그인도 간단히 구현 가능

## 🌐 라이브러리 vs API 비교

| 구분   | 라이브러리(Library)                   | API                                    |
|--------|--------------------------------------|----------------------------------------|
| 공통점 | 반복적이고 재사용 가능한 코드 사용   | 반복적이고 재사용 가능한 코드 사용     |
| 차이점 | 프로젝트 내부에 코드를 직접 추가 사용 | 네트워크(HTTP)를 통해 외부 서비스와 연결 |

**쉽게 말하면?**

- **라이브러리**는 코드 자체를 내 프로젝트 안에서 사용
- **API**는 다른 서비스와 네트워크 연결로 데이터 교환 시 사용

---

# ⚙️ 03 프레임워크(Framework)

## 🚧 프레임워크란?

- 프로그램 개발을 위한 기본 틀(Frame)을 제공하는 도구
- 코드 작성 방법과 전체 구조가 미리 정해져 있어, 개발자는 정해진 규칙에 따라 개발 진행
- 협업에 유리하며, 개발자는 코드의 로직에 더 집중 가능

## 🎯 프레임워크의 주요 특징

- 프로젝트의 전체적인 구조 제공 (코드를 넣을 틀 제공)
- 개발 생산성 향상 (반복 코드 작성 감소)
- 협업에 유리 (정해진 규칙 준수)
- 다양한 개발 도구(tool) 제공으로 편리한 개발 환경 지원

## 📌 예시: Django (장고, 파이썬 프레임워크)

- 파이썬 기반의 웹 개발 프레임워크
- 자동으로 관리 페이지 생성 제공
- 빠른 개발 속도 및 안정성 보장

## 🚦 라이브러리 vs 프레임워크 비교

| 구분      | 라이브러리                     | 프레임워크                               |
|-----------|--------------------------------|------------------------------------------|
| 사용 방법 | 필요할 때마다 골라서 사용     | 정해진 규칙과 방식 안에서 사용           |
| 주도권    | 개발자 주도 (라이브러리 호출) | 프레임워크 주도 (코드를 프레임워크가 호출)|
| 구조      | 특정 기능 단위 (작은 규모)    | 전체 프로젝트 구조 제공 (큰 규모)        |
| 예시      | passport.js, Axios, NumPy      | Django, React, Spring                    |

---

# ✨ 전체적인 개념 핵심 요약!

- **API**는 서버와 서버를 연결하는 다리 (네트워크 소통)
- **라이브러리**는 자주 사용하는 기능을 프로젝트에서 바로 사용할 수 있게 제공
- **프레임워크**는 전체적인 개발 규칙과 구조 제공으로 협업과 생산성 향상 지원
